// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Message<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Message<'a> {
  type Inner = Message<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new( buf, loc ) }
  }
}

impl<'a> Message<'a> {
  pub const VT_SEQ: flatbuffers::VOffsetT = 4;
  pub const VT_ROUTES: flatbuffers::VOffsetT = 6;
  pub const VT_HOPS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Message { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args MessageArgs<'args>
  ) -> flatbuffers::WIPOffset<Message<'bldr>> {
    let mut builder = MessageBuilder::new(_fbb);
    builder.add_seq(args.seq);
    if let Some(x) = args.hops { builder.add_hops(x); }
    if let Some(x) = args.routes { builder.add_routes(x); }
    builder.finish()
  }


  #[inline]
  pub unsafe fn seq(&self) -> u64 {
    self._tab.get::<u64>(Message::VT_SEQ, Some(0)).unwrap()
  }
  #[inline]
  pub unsafe fn routes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Route<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Route>>>>(Message::VT_ROUTES, None)
  }
  #[inline]
  pub unsafe fn hops(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Hop<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Hop>>>>(Message::VT_HOPS, None)
  }
}

impl flatbuffers::Verifiable for Message<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("seq", Self::VT_SEQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Route>>>>("routes", Self::VT_ROUTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Hop>>>>("hops", Self::VT_HOPS, false)?
     .finish();
    Ok(())
  }
}
pub struct MessageArgs<'a> {
    pub seq: u64,
    pub routes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Route<'a>>>>>,
    pub hops: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Hop<'a>>>>>,
}
impl<'a> Default for MessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    MessageArgs {
      seq: 0,
      routes: None,
      hops: None,
    }
  }
}

pub struct MessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_seq(&mut self, seq: u64) {
    self.fbb_.push_slot::<u64>(Message::VT_SEQ, seq, 0);
  }
  #[inline]
  pub fn add_routes(&mut self, routes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Route<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Message::VT_ROUTES, routes);
  }
  #[inline]
  pub fn add_hops(&mut self, hops: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Hop<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Message::VT_HOPS, hops);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Message<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Message<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Message");
    unsafe {
      ds.field("seq", &self.seq());
      ds.field("routes", &self.routes());
      ds.field("hops", &self.hops());
    }
    ds.finish()
  }
}
pub enum RouteOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Route<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Route<'a> {
  type Inner = Route<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new (buf, loc ) }
  }
}

impl<'a> Route<'a> {
  pub const VT_ROUTE_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SRC: flatbuffers::VOffsetT = 6;
  pub const VT_DST: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Route { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RouteArgs
  ) -> flatbuffers::WIPOffset<Route<'bldr>> {
    let mut builder = RouteBuilder::new(_fbb);
    builder.add_dst(args.dst);
    builder.add_src(args.src);
    builder.add_route_id(args.route_id);
    builder.finish()
  }


  #[inline]
  pub unsafe fn route_id(&self) -> u16 {
    self._tab.get::<u16>(Route::VT_ROUTE_ID, Some(0)).unwrap()
  }
  #[inline]
  pub unsafe fn src(&self) -> u32 {
    self._tab.get::<u32>(Route::VT_SRC, Some(0)).unwrap()
  }
  #[inline]
  pub unsafe fn dst(&self) -> u32 {
    self._tab.get::<u32>(Route::VT_DST, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Route<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("route_id", Self::VT_ROUTE_ID, false)?
     .visit_field::<u32>("src", Self::VT_SRC, false)?
     .visit_field::<u32>("dst", Self::VT_DST, false)?
     .finish();
    Ok(())
  }
}
pub struct RouteArgs {
    pub route_id: u16,
    pub src: u32,
    pub dst: u32,
}
impl<'a> Default for RouteArgs {
  #[inline]
  fn default() -> Self {
    RouteArgs {
      route_id: 0,
      src: 0,
      dst: 0,
    }
  }
}

pub struct RouteBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RouteBuilder<'a, 'b> {
  #[inline]
  pub fn add_route_id(&mut self, route_id: u16) {
    self.fbb_.push_slot::<u16>(Route::VT_ROUTE_ID, route_id, 0);
  }
  #[inline]
  pub fn add_src(&mut self, src: u32) {
    self.fbb_.push_slot::<u32>(Route::VT_SRC, src, 0);
  }
  #[inline]
  pub fn add_dst(&mut self, dst: u32) {
    self.fbb_.push_slot::<u32>(Route::VT_DST, dst, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RouteBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RouteBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Route<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Route<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Route");
    unsafe{
      ds.field("route_id", &self.route_id());
      ds.field("src", &self.src());
      ds.field("dst", &self.dst());
    }
      ds.finish()
  }
}
pub enum HopOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Hop<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Hop<'a> {
  type Inner = Hop<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc ) }
  }
}

impl<'a> Hop<'a> {
  pub const VT_ROUTE_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SRC: flatbuffers::VOffsetT = 6;
  pub const VT_THIS: flatbuffers::VOffsetT = 8;
  pub const VT_TTL: flatbuffers::VOffsetT = 10;
  pub const VT_RTT: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Hop { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args HopArgs
  ) -> flatbuffers::WIPOffset<Hop<'bldr>> {
    let mut builder = HopBuilder::new(_fbb);
    builder.add_this(args.this);
    builder.add_src(args.src);
    builder.add_rtt(args.rtt);
    builder.add_route_id(args.route_id);
    builder.add_ttl(args.ttl);
    builder.finish()
  }


  #[inline]
  pub unsafe fn route_id(&self) -> u16 {
    self._tab.get::<u16>(Hop::VT_ROUTE_ID, Some(0)).unwrap()
  }
  #[inline]
  pub unsafe fn src(&self) -> u32 {
    self._tab.get::<u32>(Hop::VT_SRC, Some(0)).unwrap()
  }
  #[inline]
  pub unsafe fn this(&self) -> u32 {
    self._tab.get::<u32>(Hop::VT_THIS, Some(0)).unwrap()
  }
  #[inline]
  pub unsafe fn ttl(&self) -> u8 {
    self._tab.get::<u8>(Hop::VT_TTL, Some(0)).unwrap()
  }
  #[inline]
  pub unsafe fn rtt(&self) -> u16 {
    self._tab.get::<u16>(Hop::VT_RTT, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Hop<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("route_id", Self::VT_ROUTE_ID, false)?
     .visit_field::<u32>("src", Self::VT_SRC, false)?
     .visit_field::<u32>("this", Self::VT_THIS, false)?
     .visit_field::<u8>("ttl", Self::VT_TTL, false)?
     .visit_field::<u16>("rtt", Self::VT_RTT, false)?
     .finish();
    Ok(())
  }
}
pub struct HopArgs {
    pub route_id: u16,
    pub src: u32,
    pub this: u32,
    pub ttl: u8,
    pub rtt: u16,
}
impl<'a> Default for HopArgs {
  #[inline]
  fn default() -> Self {
    HopArgs {
      route_id: 0,
      src: 0,
      this: 0,
      ttl: 0,
      rtt: 0,
    }
  }
}

pub struct HopBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HopBuilder<'a, 'b> {
  #[inline]
  pub fn add_route_id(&mut self, route_id: u16) {
    self.fbb_.push_slot::<u16>(Hop::VT_ROUTE_ID, route_id, 0);
  }
  #[inline]
  pub fn add_src(&mut self, src: u32) {
    self.fbb_.push_slot::<u32>(Hop::VT_SRC, src, 0);
  }
  #[inline]
  pub fn add_this(&mut self, this: u32) {
    self.fbb_.push_slot::<u32>(Hop::VT_THIS, this, 0);
  }
  #[inline]
  pub fn add_ttl(&mut self, ttl: u8) {
    self.fbb_.push_slot::<u8>(Hop::VT_TTL, ttl, 0);
  }
  #[inline]
  pub fn add_rtt(&mut self, rtt: u16) {
    self.fbb_.push_slot::<u16>(Hop::VT_RTT, rtt, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HopBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HopBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Hop<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Hop<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Hop");
    unsafe {
      
    
      ds.field("route_id", &self.route_id());
      ds.field("src", &self.src());
      ds.field("this", &self.this());
      ds.field("ttl", &self.ttl());
      ds.field("rtt", &self.rtt());
    }
    ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_message<'a>(buf: &'a [u8]) -> Message<'a> {
  unsafe { flatbuffers::root_unchecked::<Message<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_message<'a>(buf: &'a [u8]) -> Message<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Message<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Message`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_unchecked`.
pub fn root_as_message(buf: &[u8]) -> Result<Message, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Message>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Message` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_message_unchecked`.
pub fn size_prefixed_root_as_message(buf: &[u8]) -> Result<Message, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Message>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Message` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_unchecked`.
pub fn root_as_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Message<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Message<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Message` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_unchecked`.
pub fn size_prefixed_root_as_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Message<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Message<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Message and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Message`.
pub unsafe fn root_as_message_unchecked(buf: &[u8]) -> Message {
  flatbuffers::root_unchecked::<Message>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Message and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Message`.
pub unsafe fn size_prefixed_root_as_message_unchecked(buf: &[u8]) -> Message {
  flatbuffers::size_prefixed_root_unchecked::<Message>(buf)
}
#[inline]
pub fn finish_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Message<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Message<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
